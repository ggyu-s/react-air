{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(search),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearch),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(searchSaga);\n\nimport { all, call, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { AIRPORT_SEARCH_FAILURE, AIRPORT_SEARCH_REQUEST, AIRPORT_SEARCH_SUCCESS } from \"../reducers/search\";\n\nfunction searchAPI(data) {\n  return axios.get(\"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/KR/KRW/ko-KR/\", {\n    params: {\n      query: data\n    },\n    headers: {\n      \"x-rapidapi-key\": \"469557a336mshd2e8b79d6b4248ep17d5bcjsn0394592f4758\",\n      \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\"\n    }\n  });\n}\n\nfunction search(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function search$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(searchAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result); // console.log(result.data.Places.PlaceName, result.data.Places.PlaceId);\n          // yield put({\n          //   type: AIRPORT_SEARCH_SUCCESS,\n          //   data: result.data,\n          // });\n\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: AIRPORT_SEARCH_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchSearch() {\n  return _regeneratorRuntime.wrap(function watchSearch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(AIRPORT_SEARCH_REQUEST, search);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function searchSaga() {\n  return _regeneratorRuntime.wrap(function searchSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchSearch)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Volumes/ggyu/coding/react-air/front/sagas/search.js"],"names":["search","watchSearch","searchSaga","all","call","put","takeLatest","fork","axios","AIRPORT_SEARCH_FAILURE","AIRPORT_SEARCH_REQUEST","AIRPORT_SEARCH_SUCCESS","searchAPI","data","get","params","query","headers","action","result","console","log","error","type","response"],"mappings":";;oDAwBUA,M;qDAkBAC,W;qDAIeC,U;;AA9CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,sBADF,EAEEC,sBAFF,EAGEC,sBAHF,QAIO,oBAJP;;AAMA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,SAAOL,KAAK,CAACM,GAAN,CACL,0GADK,EAEL;AACEC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAEH;AADD,KADV;AAIEI,IAAAA,OAAO,EAAE;AACP,wBAAkB,oDADX;AAEP,yBACE;AAHK;AAJX,GAFK,CAAP;AAaD;;AAED,SAAUjB,MAAV,CAAiBkB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMd,IAAI,CAACQ,SAAD,EAAYM,MAAM,CAACL,IAAnB,CAAV;;AAFnB;AAEUM,UAAAA,MAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAHJ,CAII;AACA;AACA;AACA;AACA;;AARJ;AAAA;;AAAA;AAAA;AAAA;AAUIC,UAAAA,OAAO,CAACE,KAAR;AAVJ;AAWI,iBAAMjB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEd,sBADE;AAERa,YAAAA,KAAK,EAAE,YAAME,QAAN,CAAeX;AAFd,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUZ,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACI,sBAAD,EAAyBV,MAAzB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACI,IAAI,CAACN,WAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, takeLatest, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  AIRPORT_SEARCH_FAILURE,\n  AIRPORT_SEARCH_REQUEST,\n  AIRPORT_SEARCH_SUCCESS,\n} from \"../reducers/search\";\n\nfunction searchAPI(data) {\n  return axios.get(\n    \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/KR/KRW/ko-KR/\",\n    {\n      params: {\n        query: data,\n      },\n      headers: {\n        \"x-rapidapi-key\": \"469557a336mshd2e8b79d6b4248ep17d5bcjsn0394592f4758\",\n        \"x-rapidapi-host\":\n          \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\n      },\n    }\n  );\n}\n\nfunction* search(action) {\n  try {\n    const result = yield call(searchAPI, action.data);\n    console.log(result);\n    // console.log(result.data.Places.PlaceName, result.data.Places.PlaceId);\n    // yield put({\n    //   type: AIRPORT_SEARCH_SUCCESS,\n    //   data: result.data,\n    // });\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: AIRPORT_SEARCH_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchSearch() {\n  yield takeLatest(AIRPORT_SEARCH_REQUEST, search);\n}\n\nexport default function* searchSaga() {\n  yield all([fork(watchSearch)]);\n}\n"]},"metadata":{},"sourceType":"module"}